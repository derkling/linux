Energy cost model for energy-aware scheduling (EXPERIMENTAL)

Introduction
=============

The basic energy model uses platform energy data stored in sched_energy data
structures attached to the sched_groups in the sched_domain hierarchy. The
energy cost model offers two function that can be used to guide scheduling
decisions:

1.	energy_diff_util(cpu, util, wakeups) 
2.	energy_diff_task(cpu, task)

Both return the energy cost delta caused by adding/removing utilization or a
task to/from a specific cpu. To be more precise:

util: The signed utilization delta. That is, the amount of cpu utilization we
want to add or remove from the cpu, basically how much more/less is the cpu
expected to be busy. The utilization is associated with one or more tasks. Note
that utilization is _not_ priority scaled load, it is actual cpu utilization
averaged over time using a geometric series.

wakeups: Represents the wakeups (task enqueues, not idle exits) caused by the
utilization we are about to add or remove from the cpu. As with utilization,
the wakeup rate is averaged over time using a geometric series. The energy
model estimates (in a fairly naive way) the proportion of the wakeups that
causes cpu wakeups (idle exits). This metric is particularly important for
short but frequently running tasks as the wakeup cost (energy) for these can be
substantial if placed on an idle cpu.

Background and Terminology
===========================

To make it clear from the start:

energy = [joule] (finite resource battery powered devices)
power = energy/time = joule/second = [watt]

The goal of energy-aware scheduling is to minimize energy, while still getting
the job done. That is, we want to maximize:

	performance [inst/s]
	--------------------
	    power [W]

which is equivalent to minimizing:

	energy [J]
	-----------
	instruction 

while still getting 'good' performance.

The system topology is represented in the scheduler by the sched_domain
hierarchy, which has sched_groups attached at each level that groups one or
more cpus together. To add energy awareness to the scheduler we need to
consider power and frequency domains.

Power domains:

A power domain is a part of the system that can be power on/off. They are
typically organized in a hierarchy where you may be able to power down just a
cpu or a group of cpus along with any associated resources (e.g.  shared
caches). Powering up a cpu means that all power domains it is a part of in the
hierarchy must be powered up. Hence, it is more expensive to power up the first
cpu that belongs to a higher level power domain than powering up additional
cpus in the same high level domain. Two level power domain hierarchy example:

		Power source
                         +-------------------------------+----...
per group PD		 G                               G
                         |           +----------+        |
		    +--------+-------| Shared   |  (other groups)
per-cpu PD	    G        G       | resource |
		    |        |       +----------+
		+-------+ +-------+
		| CPU 0 | | CPU 1 |
		+-------+ +-------+

Frequency domains:

Frequency domains (P-states) typically cover the same group of cpus as one of
the power domain levels. That is, there might be several smaller power domains
sharing the same frequency (P-state) or there might be a power domain spanning
multiple frequency domains.

From a scheduling point of view there is no need to know the actual
frequencies. All the scheduler cares about is the compute capacity available at
the current state the cpu is in and if other states exists. For that reason,
and to also factor in any cpu micro-architecture differences, compute capacity
scaling states are called 'capacity states' in this document. For SMP systems
this is equivalent to P-states. For mixed micro-architecture systems (like ARM
big.LITTLE) it is P-states scaled according the micro-architecture performance
relative to the other cpus in the system.

Energy modelling:

Due to the hierarchical nature of the power domains, the most obvious way to
model energy costs is therefore to associate power and energy costs with
domains (groups of cpus). Energy costs of shared resources are associated with
the group of cpus that share the resources, only the cost of powering the
cpu itself and any private resources (e.g. private L1 caches) is associated
with the per-cpu groups (lowest level).

For example, for an SMP system with per-cpu power domains and a well as a
cluster level (group of cpus) power domain we get the overall energy costs to be:

	energy = energy_cluster + n * energy_cpu

where 'n' is the number of cpus power up and energy_cluster is the cost as soon
as any cpu in the cluster is powered up.

The power and frequency domains can naturally be mapped onto the existing
sched_domain hierarchy and sched_groups by adding the necessary data to the
existing data structures.

The energy model considers energy consumption from three contributors (shown in
the illustration below):

1. Busy energy: Energy consumed while a cpu and the higher level groups that it
belongs to are busy running tasks. Busy energy is associated with the state of
the cpu, not an event. The time the cpu spends in this state varies. Thus, the
most obvious platform parameter for this contribution is busy power
(energy/time).

2. Idle energy: Energy consumed while a cpu and higher level groups that it
belongs to are idle (in a C-state). Like busy energy, idle energy is associated
with the state of the cpu. Thus, the platform parameter for this contribution
is idle power (energy/time).

3. Wakeup energy: Energy consumed for a transition from an idle-state (C-state)
to a busy state (P-state). This energy is associated with an event with a fixed
duration (at least roughly). The most obvious platform parameter for this
contribution is therefore wakeup energy. Energy spent to do a full idle->busy
and busy->idle cycles (they always come in pairs, transitions between
idle-states are not modelled). That is the areas under the power graph for the
transition phases in the illustration.


	Power
	^
	|            busy->idle             idle->busy
	|            transition             transition
	|                 _                      _
	|                / \                    / \
	|               |  |                   |  \__________________
	|______________/   \                  /   
	|                   \                /
	|  Busy              \    Idle      /        Busy
	|  low P-state        \____________/         high P-state
	|
	+------------------------------------------------------------> time

Busy    |--------------|                          |-----------------|

Wakeup                 |------|            |------|

Idle                          |------------|
                                                                

The basic algorithm
====================

The basic idea is to determine the total energy impact when utilization is
added or removed by estimating the impact at each level in the sched_domain
hierarchy starting from the bottom (sched_group = cpu). The energy cost comes
from two sources: busy time (sched_group is awake because one or more cpus are
busy) and wakeups (idle state exits). Power and energy numbers account for
energy costs associated with all cpu in the sched_group as a group. In some
cases it is possible to bail out early if the additional/removed utilization
doesn't affect the busy time of higher levels.

	for_each_domain(cpu, sd) {
		sg = sched_group_of(cpu)
		energy_before = curr_util(sg) * busy_power(sg)
                	        + 1-curr_util(sg) * idle_power(sg)
		energy_after = new_util(sg) * busy_power(sg)
                	        + 1-new_util(sg) * idle_power(sg)
                        	+ new_util(sg) * wakeups * wakeup_energy(sg)
		energy_diff += energy_before - energy_after

		if (energy_before == energy_after)
			break;
	}

	return energy_diff

{curr, new}_util: The cpu utilization at the lowest level and the overall
non-idle time for the entire group for higher levels.  Utilization is in the
range 0.0 to 1.0 in the pseudo-code.

busy_power: The power consumption of the sched_group.

idle_power: The power consumption of the sched_group when idle.

wakeups: Average wakeup rate of the task(s) being added/removed. To predict how
many of the wakeups that causes idle exits we scale the number by the
utilization (assuming that wakeups are uniformly distributed).

wakeup_energy: The energy consumed for an idle exit/entry cycle for the
sched_group.

Note: It is a fundamental assumption that the utilization is (roughly) scale
invariant. Task utilization tracking factors in any frequency scaling and
performance scaling differences due to difference cpu microarchitectures such
that task utilization is can be used across the entire system. This is _not_ in
place yet.

Platform energy data
=====================

struct sched_energy can be attached to sched_groups in the sched_domain
hierarchy and has the following members:

cap_states:
	List of struct capacity_state representing the supported capacity states 
	(P-states). struct capacity_state has two members: cap and power, which 
	represents the compute capacity and the busy power of the state. The 
	list must ordered by capacity low->high.

nr_cap_states:
	Number of capacity states in cap_states.

idle_power:
	Idle power consumption. Will be extended to support multiple C-states 
	later.

wakeup_energy:
	Energy cost of wakeup/power-down cycle for the sched_group which this is 
	attached to. Will be extended to support different costs for different 
	C-states later.

There are no unit requirements for the energy cost data. Data can be normalized 
with any reference, however, the normalization must be consistent across all 
energy cost data. That is, one bogo-joule/watt must be same quantity for data, 
but we don't care what it is.

Platform characterization
==========================

Obtaining the actual model data for a particular platform requires some way of
measuring power/energy. There isn't a tool to help with this (yet). This
section provides a recipe for use as reference. It covers the steps used to
characterize the ARM TC2 development platform.

The energy model needs three types of data (struct sched_energy holds these)
for each sched_group where energy costs should be taken into account:

1. Capacity state information

A list containing the compute capacity and power consumption when fully
utilized attributed to group as a whole for each available capacity state. At
the lowest level (group == cpu) this is the power of the cpu alone without
including power consumed resources shared with other cpus. It basically needs
to fit the basic modelling approach described in "Background" section:

	energy_system = energy_shared + n * energy_cpu

for a system containing with 'n' busy cpus. Only 'energy_cpu' should be
included at the lowest level. 'energy_shared' is included at the next level
which represents the group of cpus among which the resources are shared.

This model is, of course, a simplification of reality. Thus, power/energy
attributions might not always exactly represent how the hardware is designed.
Also, busy power is likely to depend on the workload. It is therefore
recommended to use a representative mix of workloads when characterizing the
capacity states.

If the group has no capacity scaling support, the list will contain a single
state where power is the busy power attributed to the group. The capacity is
ignored.

When frequency domains include multiple power domains, the group representing
the frequency domain and all child groups share capacity states. This must be
indicated by setting the SD_SHARE_CAP_STATES sched_domain flag. All groups must
have the list of capacity states with the power set the contribution of the
particular group.

2. Idle power information

Currently a single power number, but will be extended to a list later. The
power number is the group idle power consumption. Due to the way the energy
model is defined, the idle power of the deepest group idle state can
alternatively be accounted for in the parent group busy power. In that case the
group idle state powers are offset such that the idle power of the deepest
state is zero. It is less intuitive, but it is easier to measure as idle power
consumed by the group and the busy/idle power of the parent group cannot be
distinguished without per group measurement points.

3. Wakeup energy information

Currently a single energy number, but will be extended to a list later. The
wakeup energy is the total energy consumed during the transition a specific
idle state to busy (some P-state) and back again. It is not easy to measure
them individually and they always occur in pairs anyway. Exit from one idle
state and going back into a different one is not modelled.

The energy model estimates wakeup energy based on the tracked average wakeup
rate. Assuming that all task wakeups result in idle exits, the wakeup energy
consumed per time unit (~ energy rate ~ power) is:

	wakeup_energy_rate = wakeup_energy * wakeup_rate

To simplify the math in the scheduler the wakeup_energy parameter must be
pre-scaled. wakeup_rate = LOAD_AVG_MAX (=47742) is equivalent to a true wakeup
rate of 1000 wakeups per second. The wakeup_energy parameter provided in the
sched_energy data structure must therefore be scaled accordingly:

	wakeup_energy = 1000/47742 * true_wakeup_energy

Measuring capacity states and idle power:

The capacity states' capacity and power can be estimated by running a benchmark
workload at each available capacity state. By restricting the benchmark to run
on subsets of cpus it is possible to extrapolate the power consumption of
shared resources.

ARM TC2 has two clusters of two and three cpus respectively. Each cluster has a
shared L2 cache. TC2 has onchip energy counters per cluster. Running a
benchmark workload on just one cpu in a cluster means that power is consumed in
the cluster (higher level group) and a single cpu (lowest level group). Adding
another benchmark tasks to another increases the power consumption by the
amount consumed by the additional cpu. Hence, it is possible to extrapolate the
cluster busy power.

If the benchmark includes some performance score (for example sysbench cpu
benchmark), this can be used to record the compute capacity.

Measuring idle power requires insight into the idle state implementation on the
particular platform. Specifically, coupled idle-states (or package states). To
measure non-coupled per-cpu idle-states it is necessary to keep one cpu busy to
keep any shared resources alive to isolate the idle power of the cpu from
idle/busy power of the shared resources. The cpu can be tricked into different
per-cpu idle states by disabling the other states.
